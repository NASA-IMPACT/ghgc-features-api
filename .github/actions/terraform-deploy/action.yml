name: Deploy

inputs:
  env_aws_secret_name:
    required: true
    type: string
  env-file:
    required: true
    type: string
  dir:
    required: false
    type: string
    default: "."
  project_prefix:
    required: true
    type: string
  stage:
    required: true
    type: string


runs:
  using: "composite"

  steps:
    - name: Install python dependencies
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install boto3

    - name: Get relevant environment configuration from aws secrets
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        python ${{ inputs.script_path }} --secret-id ${{ inputs.env_aws_secret_name }}
        echo "STAGE=${{ inputs.stage }}" >> ${{ inputs.env-file }}
        echo "PREFIX=${{ inputs.project_prefix }}-${{ inputs.stage }}-features-api" >> ${{ inputs.env-file }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.9

    - name: Deploy
      shell: bash
      working-directory: ${{ inputs.dir }}
      run: |
        bash ./scripts/deploy.sh .env <<< init
        cat terraform.tfvars
        bash ./scripts/deploy.sh .env <<< plan

#    - name: Docker build, tag, and push image to Amazon ECR
#      shell: bash
#      env:
#        IMAGE_TAG: latest
#        ECR_REGISTRY: ${{ format('{0}.dkr.ecr.{1}.amazonaws.com/{2}-registry-{3}', env.ACCOUNT_ID, env.AWS_REGION, env.APP_NAME, env.STAGE) }}
#      run: |
#        echo $ECR_REGISTRY
#        echo $IMAGE_TAG
#         aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
#         cd veda-wfs3-app
#         docker build -t $ECR_REGISTRY }}:$IMAGE_TAG }} .
#         docker push $ECR_REGISTRY }}:$IMAGE_TAG }}
#
#    - name: ECS refresh service
#      shell: bash
#      env:
#        ECS_SERVICE_NAME: ${{ format('{0}-service-{1}', env.APP_NAME, env.STAGE) }}
#      run: |
#        echo $ECS_SERVICE_NAME
#         aws ecs update-service \
#           --cluster $ECS_SERVICE_NAME \
#           --service $ECS_SERVICE_NAME \
#           --task-definition $ECS_SERVICE_NAME \
#           --force-new-deployment
